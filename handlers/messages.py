import json
import math
import random
import socket
import struct
import uuid
from datetime import datetime
from io import BytesIO

import aiohttp
from aiogram import Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from functools import partial

from aifory import AIFORYClient
from keyboards import main_menu_kb, ask_game_kb, def_kb, profile_kb, change_tradelink_kb, \
    change_mode_kb_off, change_mode_kb_on
from states import Form
from services.market import get_balance, get_price_list, send_image
from db_worker import UserDatabaseManager
from aiogram import Bot
from config import GAMES
from services.steam import SteamName
import re

buy_koef = 1.05
steam_nick = SteamName()
pay_in_main = AIFORYClient(
    "",
    "",
    "")

states_dict = {3: "üü¢", 4: "üî¥", 5: "üî¥", 6: "üî¥"}


def can_convert_to_float(s: str) -> bool:
    try:
        float(s)
        return True
    except ValueError:
        return False


async def handle_main_menu(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    current_state = await state.get_state()
    print(f"Current state in handle_main_menu: {current_state}")
    users_in_process = await db.get_all_user_in_process()
    is_admin = await db.user_is_admin(message.from_user.id)

    if current_state != Form.main_menu.state:
        return

    # if not is_admin:
    #     return

    if message.text == "–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        if not (message.from_user.id in users_in_process):
            await state.update_data(price_check=False)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=ask_game_kb)
            await Form.ask_game.set()
        else:
            await message.answer(
                "–í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

    elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞":
        await state.update_data(price_check=True)
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞'")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=ask_game_kb)
        await Form.ask_game.set()

    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        await state.finish()
        await Form.profile_st.set()
        profile_light_data_pt1 = await db.get_user_profile_data(message.from_user.id)
        profile_light_data_pt2 = await db.get_profile_user_data(message.from_user.id)

        text = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile_light_data_pt2['username']}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {profile_light_data_pt1[0]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {profile_light_data_pt1[1]}
–ë–∞–ª–∞–Ω—Å: {profile_light_data_pt2['balance']}
ID: {message.from_user.id}
Trade link: <a href='{profile_light_data_pt2['trade_link']}'>{profile_light_data_pt2['steam_nickname']}</a>"""
        await message.answer(text, reply_markup=profile_kb, parse_mode=types.ParseMode.HTML)


async def process_trade_link(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    trade_link = message.text
    match = re.search(r'partner=(\d+)&token=([\w-]+)', trade_link)

    if match:
        await db.update_trade_link(message.from_user.id, trade_link,
                                   steam_nick.get_steam_username_from_trade_url(trade_link))
        await state.finish()
        await Form.main_menu.set()
        await message.answer("–¢—Ä–µ–π–¥ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=main_menu_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–π–¥ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def ask_game(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    answer = message.text

    user_data = await state.get_data()

    if answer in GAMES:
        await state.update_data(game=answer)
        if user_data.get("price_check", False):
            balance = 1.00
        else:
            balance = 1  # get_balance()
        if balance is not None:
            user_data = await state.get_data()

            if not user_data.get("price_check", False):
                await db.add_user_to_process(message.from_user.id)
            await Form.buy_menu.set()
            await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=def_kb)
        else:
            await Form.main_menu.set()
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb)
    elif answer in ["–ù–∞–∑–∞–¥"]:
        await Form.main_menu.set()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def buy_menu(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    item_name = message.text
    await state.update_data(item_name=item_name)
    await Form.buy_menu_confirm.set()
    await message.answer("–í—ã–ø–æ–ª–Ω—è—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    await process_buy_menu_confirm(message, state, db, bot)


async def send_image_with_text_and_keyboard(url: str, chat_id: int, bot: Bot, text, kb):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                image_data = await response.read()
                image = InputFile(BytesIO(image_data), filename="image.png")
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=image,
                    caption=text,
                    reply_markup=kb
                )
            else:
                await bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)


async def process_buy_menu_confirm(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    user_data = await state.get_data()
    item_name = user_data.get("item_name")

    if not item_name.lower() == "–Ω–∞–∑–∞–¥":

        success, data = get_price_list(item_name, GAMES[user_data["game"]][0])
        if success:
            items = data
            if items:
                sorted_items = sorted(items, key=lambda x: x['price'])[:10]
                builder = InlineKeyboardMarkup(row_width=2)

                for index, item in enumerate(sorted_items):
                    item_id = item['id']
                    price = item['price'] / 100
                    price_for_user = math.ceil(price * buy_koef * 100) / 100
                    button_data = json.dumps({"i": index})
                    print(button_data)
                    button_text = f"–¶–µ–Ω–∞: {price:.2f}‚ÇΩ"
                    builder.insert(
                        InlineKeyboardButton(
                            text=button_text,
                            callback_data=button_data
                        )
                    )
                print(sorted_items)
                await state.update_data(items=sorted_items)
                await send_image_with_text_and_keyboard(url=f'https://api.steamapis.com/image/item/{GAMES[user_data["game"]][1]}/{user_data["item_name"]}', chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", kb=builder, bot=bot)

               # await send_image(
                #    f'https://api.steamapis.com/image/item/{GAMES[user_data["game"]][1]}/{user_data["item_name"]}',
                #    message.chat.id, bot)


                #await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=builder)

                if user_data["price_check"]:
                    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'",
                                         reply_markup=change_mode_kb_on)
                else:
                    await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'", reply_markup=def_kb)
            else:
                await message.answer(f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
                await state.finish()
                await db.remove_user_from_process(message.from_user.id)
        else:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω')
            await state.finish()
            await db.remove_user_from_process(message.from_user.id)
    else:
        await state.finish()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=ask_game_kb)
        await Form.ask_game.set()


async def trade_link_confirmation_purchase(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    trade_link = message.text
    match = re.search(r'partner=(\d+)&token=([\w-]+)', trade_link)

    if match:
        await db.update_trade_link(message.from_user.id, trade_link)
        usr_tradelink = await db.get_user_trade_link(message.from_user.id)
        await message.answer("–¢—Ä–µ–π–¥ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
        await Form.trade_link_confirmation.set()
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥ —Å—Å—ã–ª–∫—É: –¥–∞ –∏–ª–∏ –Ω–µ—Ç\n{usr_tradelink}")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–π–¥ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def process_item_name(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    item_name = message.text
    if item_name in ["–ù–∞–∑–∞–¥", "–ú–µ–Ω—é"]:
        await Form.main_menu.set()
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        return

    await state.update_data(item_name=item_name)
    await message.answer("–í—ã–ø–æ–ª–Ω—è—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")

    user_data = await state.get_data()
    success, data = get_price_list(item_name, GAMES[user_data["game"]][0])
    if success:
        items = data
        if items:
            lowest_price_item = min(items, key=lambda x: x['price'])
            lowest_price_rub = lowest_price_item['price'] / 100
            item_id = lowest_price_item['id']

            price_for_user = math.ceil(lowest_price_rub * buy_koef * 100) / 100

            try:

                await message.answer(
                    f"–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n–¶–µ–Ω–∞: {lowest_price_rub:.2f}‚ÇΩ\n —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω–∏–º—É—Ç:{price_for_user}\nID –ø—Ä–µ–¥–º–µ—Ç–∞: {item_id}\n–ö—É–ø–∏—Ç—å? (–¥–∞/–Ω–µ—Ç):"
                )
                await send_image(
                    f'https://api.steamapis.com/image/item/{GAMES[user_data["game"]][1]}/{user_data["item_name"]}',
                    message.chat.id, bot)
                await Form.confirm_purchase.set()
                await state.update_data(item_id=item_id, price=lowest_price_item['price'],
                                        price_for_user=price_for_user)
            except:
                await message.answer("""–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞, –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ Steam.
–ù–∞–ø—Ä–∏–º–µ—Ä - <code>Dead Reckoning Chest</code>, –∞ –Ω–µ <code>dead reckoning chest</code>
–ù–∞–ø—Ä–∏–º–µ—Ä -  <code>AWP | Asiimov (Field-Tested)</code>, –∞ –Ω–µ  <code>AWP | –ê–∑–∏–º–æ–≤</code>""")
        else:
            await message.answer(f"""–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞, –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ Steam.
–ù–∞–ø—Ä–∏–º–µ—Ä - Dead Reckoning Chest, –∞ –Ω–µ dead reckoning chest
–ù–∞–ø—Ä–∏–º–µ—Ä - AWP | Asiimov (Field-Tested), –∞ –Ω–µ AWP | –ê–∑–∏–º–æ–≤""")
            await state.finish()
            await db.remove_user_from_process(message.from_user.id)
    else:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω')
        await state.finish()
        await db.remove_user_from_process(message.from_user.id)


async def go_back_to_buy_menu(message: Message, state: FSMContext, db: UserDatabaseManager):
    await Form.buy_menu.set()
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:", reply_markup=def_kb)


async def mode_switch(message: Message, state: FSMContext, db: UserDatabaseManager):
    user_data = await state.get_data()

    current_state = await state.get_state()
    print(f"Current state in handle_main_menu: {current_state}")

    if user_data["price_check"]:
        await state.update_data(price_check=False)
        await db.add_user_to_process(message.from_user.id)
        await message.answer("–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ä–µ–∂–∏–º, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã!",
                             reply_markup=change_mode_kb_off)
    else:
        await state.update_data(price_check=True)
        await db.remove_user_from_process(message.from_user.id)
        await message.answer("–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ä–µ–∂–∏–º, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã!",
                             reply_markup=change_mode_kb_on)


async def go_back_to_ask_game(message: Message, state: FSMContext, db: UserDatabaseManager):
    await Form.ask_game.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=ask_game_kb)
    await db.remove_user_from_process(message.from_user.id)


async def profile(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    current_state = await state.get_state()
    print(f"Current state in handle_main_menu: {current_state}")

    if message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        await Form.pay_in_stage1.set()
        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±. \n–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 50 —Ä—É–±.",
            reply_markup=def_kb)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å trade link":
        await state.finish()
        await Form.change_tradelink.set()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é trade —Å—Å—ã–ª–∫—É:", reply_markup=change_tradelink_kb)
    elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        data = await db.get_user_history(message.from_user.id)
        text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–∫—É–ø–æ–∫:\n"

        for row in data:
            dt_object = datetime.fromtimestamp(row['timestamp'])
            time = dt_object.strftime('%d/%m/%Y %H:%M')
            buf_text = f"{time}| {row['item_name']} - {row['price_rub']} —Ä—É–±|id = <code>{row['transaction_id']}</code>| {states_dict.get(row['status_code'], 'üü°')}\n\n"
            text += buf_text

        await message.answer(text, parse_mode=types.ParseMode.HTML)


async def change_trade_link(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    trade_link = message.text
    match = re.search(r'partner=(\d+)&token=([\w-]+)', trade_link)

    if match:
        await db.update_trade_link(message.from_user.id, trade_link,
                                   steam_nick.get_steam_username_from_trade_url(trade_url=trade_link))
        await state.finish()
        await Form.profile_st.set()
        await message.answer("–¢—Ä–µ–π–¥ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.", reply_markup=profile_kb)
    elif trade_link == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await Form.profile_st.set()
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å", reply_markup=profile_kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–π–¥ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def balance_deposit(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    current_state = await state.get_state()
    print(f"Current state in handle_main_menu: {current_state}")


async def pay_in_stage1(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    money_amount = message.text
    print(money_amount)

    if money_amount == "–ù–∞–∑–∞–¥":
        await state.finish()
        await Form.profile_st.set()
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /start", reply_markup=profile_kb)

    elif money_amount == "–ú–µ–Ω—é":
        await state.finish()
        await db.remove_user_from_process(message.from_user.id)
        await Form.main_menu.set()
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_kb)

    elif can_convert_to_float:
        money_float = float(money_amount)
        if money_float >= 150 and money_float <= 100000:
            await state.update_data(dep_money=money_float)
            await Form.pay_in_stage2.set()
            await message.answer(
                f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ {money_float}\n (–¥–∞/–Ω–µ—Ç)",
                reply_markup=def_kb)
        else:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 150 —Ä—É–±. –º–∞–∫—Å 100 000 —Ä—É–±.")
    else:
        await message.answer("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")


async def pay_in_stage2(message: Message, state: FSMContext, db: UserDatabaseManager, bot: Bot):
    answer = message.text
    if answer == "–ù–∞–∑–∞–¥" or answer.lower() == "–Ω–µ—Ç":
        await Form.pay_in_stage1.set()
        await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±. \n–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 150 —Ä—É–±.",
            reply_markup=def_kb)

    elif answer == "–ú–µ–Ω—é":
        await state.finish()
        await db.remove_user_from_process(message.from_user.id)
        await Form.main_menu.set()
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_menu_kb)

    elif answer.lower() == "–¥–∞":
        user_data = await state.get_data()
        data = {
            "amount": user_data['dep_money'],
            "invoice_id": uuid.uuid4().hex,
            "ttl": 600,
            "web_hook_url": "",
            "success_url": "https://t.me/dotaProfile_bot",
            "failed_url": "https://t.me/dotaProfile_bot",
            "ip": socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff))),
            "user_id": message.from_user.id,
            "time_register": datetime.now().timestamp(),
            "payment_type_id": 4
        }

        coms_pay_in = 1.07
        amount = round(abs(float(data['amount'])), 2)
        data['amount'] = math.ceil((amount + 1) * coms_pay_in)
        invoice_data = await pay_in_main.create_invoice(**data)

        invoice_data_db = {'user_id': message.from_user.id,
                           'chat_id': message.chat.id,
                           'invoice_id': data['invoice_id'],
                           'invoice_status': 1,
                           'money_amount': user_data['dep_money'] * coms_pay_in,
                           'money_to_user': user_data['dep_money']}
        await db.create_invoice(invoice_data_db)

        button_url = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –û–ø–ª–∞—Ç–µ", url=invoice_data['paymentURL'])
        inline_kb = InlineKeyboardMarkup().add(button_url)

        await message.answer(f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –∫ –û–ø–ª–∞—Ç–µ', –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
                             reply_markup=inline_kb)

        await state.finish()
        await Form.profile_st.set()
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=profile_kb)


def register(dp: Dispatcher, db: UserDatabaseManager, bot: Bot):
    dp.register_message_handler(partial(handle_main_menu, db=db, bot=bot),
                                Text(equals=["–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞", "–ü—Ä–æ—Ñ–∏–ª—å"]),
                                state=Form.main_menu)
    dp.register_message_handler(partial(process_trade_link, db=db, bot=bot), state=Form.get_tradelink)
    dp.register_message_handler(partial(ask_game, db=db, bot=bot), state=Form.ask_game)
    dp.register_message_handler(partial(buy_menu, db=db, bot=bot), state=Form.buy_menu)
    # dp.register_message_handler(partial(buy_menu_confirm, db=db, bot=bot), state=Form.buy_menu_confirm)
    dp.register_message_handler(partial(trade_link_confirmation_purchase, db=db, bot=bot),
                                state=Form.trade_link_confirmation_purchase)
    dp.register_message_handler(partial(process_item_name, db=db, bot=bot), state=Form.item_name)
    dp.register_message_handler(partial(pay_in_stage1, db=db, bot=bot), state=Form.pay_in_stage1)
    dp.register_message_handler(partial(pay_in_stage2, db=db, bot=bot), state=Form.pay_in_stage2)

    dp.register_message_handler(partial(go_back_to_buy_menu, db=db), Text(equals="–ù–∞–∑–∞–¥", ignore_case=True),
                                state=Form.buy_menu_confirm)
    dp.register_message_handler(partial(profile, db=db, bot=bot),
                                state=Form.profile_st)
    dp.register_message_handler(partial(change_trade_link, db=db, bot=bot),
                                state=Form.change_tradelink)

    dp.register_message_handler(partial(mode_switch, db=db), Text(equals="–í—ã–∫–ª. –†–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏", ignore_case=True),
                                state=Form.buy_menu_confirm)

    dp.register_message_handler(partial(mode_switch, db=db), Text(equals="–í–∫–ª. –†–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏", ignore_case=True),
                                state=(Form.buy_menu_confirm, Form.mode_switch))
